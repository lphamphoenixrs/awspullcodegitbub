<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CustomerViewTypeA">
	<select id="getCustomerViewInfo" resultType="Map" >
			SELECT
			s.id,
			s.id_customer,
			s.`name`,
			s.dc_capacity,
			s.ac_capacity,
			s.lat,
			s.lng,
			t.`offset`,
			ltplan.energy_lifetime,
			IF(d.energy_today, ROUND(d.energy_today, 2), 0) AS energy_today,
			IF(d.energy_today> 0, ROUND((1 - (g.energy_yesterday/d.energy_today) ) * 100,2), 0) AS compare_energy_today,
			IF(plan.ytd_kwh_total, FORMAT(ROUND(plan.ytd_kwh_total * 0.0117, 0), 0) , 0) AS total_tree,
			IF(plan.ytd_kwh_total, FORMAT(ROUND((plan.ytd_kwh_total * 392), 0), 0) , 0) AS total_co2,
			IF(irr.avg_sensor1_data_today, irr.avg_sensor1_data_today, 0) AS avg_sensor1_data_today,
			IF(irr.avg_sensor1_data_today > 0 , ROUND((1 - (irryesterday.avg_sensor1_data_yesterday/irr.avg_sensor1_data_today) ) * 100,2), 0) AS compare_irradiance_today,
			IF(ptoday.ac_power_today, ptoday.ac_power_today, 0) AS ac_power_today,
			IF(ptoday.ac_power_today> 0, ROUND((1 - (pyesterday.ac_power_yesterday/ptoday.ac_power_today) ) * 100,2) , 0) AS compare_power_today
			
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
			LEFT JOIN country c ON c.id = s.id_country
			
			LEFT JOIN(
					SELECT
						d.id_site,
						sh.id_device,
						MAX(sh.w_hours_received) - MIN(sh.w_hours_received) AS energy_today
					FROM
						site s
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
						LEFT JOIN device d ON d.id_site = s.id
						LEFT JOIN model_shark100 AS sh ON sh.id_device = d.id 
					WHERE
						YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{current_time} ) 
						AND MONTH ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{current_time} ) 
						AND DAY ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = DAY ( #{current_time} ) 
						AND CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> #{current_time}
						AND s.id = #{id_site}
						AND s.id_customer = #{id_customer}
					GROUP BY
						sh.id_device
			)d ON d.id_site = s.id
			
			
			LEFT JOIN(
				SELECT
					d.id_site,
					sh.id_device,
					MAX(sh.w_hours_received) - MIN(sh.w_hours_received) AS energy_yesterday
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_shark100 AS sh ON sh.id_device = d.id 
				WHERE
					YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( ADDDATE(#{current_time}, INTERVAL -1  DAY) ) 
					AND MONTH ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( ADDDATE(#{current_time}, INTERVAL -1  DAY) ) 
					AND DAY ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = DAY ( ADDDATE(#{current_time}, INTERVAL -1  DAY) ) 
					AND CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> ADDDATE(#{current_time}, INTERVAL -1  DAY)
					AND s.id = #{id_site}
					AND s.id_customer = #{id_customer}
				GROUP BY
					sh.id_device
			)	g ON g.id_site = s.id 
			
			
			
			LEFT JOIN (
				SELECT
							d.id_site,
							sh.id_device,
							sh.ac_power,
							sh.ytd_kwh_total,
							MAX( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) AS sh_time 
						FROM
							site s
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device d ON d.id_site = s.id
							LEFT JOIN model_ivt_solaron_ext AS sh ON sh.id_device = d.id 
						WHERE
							YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{current_time} ) 
							AND MONTH ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{current_time} ) 
							AND DAY ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = DAY ( #{current_time} ) 
							AND CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> #{current_time}
							AND s.id = #{id_site}
							AND s.id_customer = #{id_customer}
						GROUP BY
							sh.id_device 
			) plan ON plan.id_site = s.id 
			
			
			LEFT JOIN (
				SELECT
							d.id_site,
							sh.id_device,
							sh.ac_power,
							MAX(sh.ytd_kwh_total) AS energy_lifetime,
							MAX( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) AS sh_time 
						FROM
							site s
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device d ON d.id_site = s.id
							LEFT JOIN model_ivt_solaron_ext AS sh ON sh.id_device = d.id 
						WHERE 
							CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> #{current_time}
							AND s.id = #{id_site}
							AND s.id_customer = #{id_customer}
						GROUP BY
							sh.id_device 
			) ltplan ON ltplan.id_site = s.id
			
			
			
			LEFT JOIN(
				SELECT
					s.id AS id_site,
					ROUND((IF(MAX(mr.sensor1_data), MAX(mr.sensor1_data) , 0)) ,2)  AS avg_sensor1_data_today	
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
				WHERE
					s.id = #{id_site}
					AND s.id_customer = #{id_customer}
					AND s.`status` = 1 
					AND s.is_delete = 0 
					AND mr.time IS NOT NULL
					AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) BETWEEN CONCAT_WS(' ', DATE_FORMAT(#{current_time}, '%Y-%m-%d') , '00:00:00') AND #{current_time}
			)irr ON irr.id_site = s.id
			
			
			LEFT JOIN (
				SELECT
					s.id AS id_site,
					ROUND((IF(MAX(mr.sensor1_data), MAX(mr.sensor1_data) , 0)) ,2)  AS avg_sensor1_data_yesterday	
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
				WHERE
					s.id = #{id_site}
					AND s.id_customer = #{id_customer}
					AND s.`status` = 1 
					AND s.is_delete = 0 
					AND mr.time IS NOT NULL
					AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) BETWEEN DATE_ADD(CONCAT_WS(' ', DATE_FORMAT(#{current_time}, '%Y-%m-%d') , '00:00:00'),INTERVAL -1 DAY)  AND DATE_ADD(CONCAT_WS(' ', DATE_FORMAT(#{current_time}, '%Y-%m-%d') , '23:59:59'),INTERVAL -1 DAY)
		
			)irryesterday ON irryesterday.id_site = s.id
			
			
			LEFT JOIN(
				SELECT
					s.id AS id_site,
					ROUND(MAX(mr.ac_power), 2)  AS ac_power_today
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
				WHERE
					s.id = #{id_site}
					AND s.id_customer = #{id_customer}
					AND s.`status` = 1 
					AND s.is_delete = 0 
					AND mr.time IS NOT NULL
					AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) BETWEEN CONCAT_WS(' ', DATE_FORMAT(#{current_time}, '%Y-%m-%d') , '00:00:00')  AND #{current_time}
			)ptoday ON ptoday.id_site = s.id
			
			
			LEFT JOIN (
				SELECT
					s.id AS id_site,
					ROUND(MAX(mr.ac_power), 2)  AS ac_power_yesterday
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
				WHERE
					s.id = #{id_site}
					AND s.id_customer = #{id_customer}
					AND s.`status` = 1 
					AND s.is_delete = 0 
					AND mr.time IS NOT NULL
					AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) BETWEEN DATE_ADD(CONCAT_WS(' ', DATE_FORMAT(#{current_time}, '%Y-%m-%d') , '00:00:00'),INTERVAL -1 DAY)  AND DATE_ADD(CONCAT_WS(' ', DATE_FORMAT(#{current_time}, '%Y-%m-%d') , '23:59:59'),INTERVAL -1 DAY)
			)pyesterday ON pyesterday.id_site = s.id
			
			
		WHERE
			s.id = #{id_site}
			AND s.id_customer = #{id_customer}
			AND s.`status` = 1 
			AND s.is_delete = 0;
		
	</select>

	<select id="getChartDataEnergy" resultType="Map" >
		<if test="filterBy == 'today'">
			SELECT
				tmin.*,
				m.avg_sensor1_data
			FROM
				(
				SELECT
					k.time,
					k.id,
					k.id_device,
					k.last_updated,
					k.local_time,
					k.convert_time,
					k.full_time,
					ROUND(SUM(k.energy_kwh),2) AS energy_kwh
					FROM(
					SELECT t.*,
					m.max_kwh - t.min_kwh as energy_kwh
					FROM (
						SELECT
							iv.time,
							si.id,
							iv.id_device,
							MIN(iv.ytd_kwh_total) AS min_kwh,
							DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS last_updated,
							DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d %H' ) AS local_time,
							DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%l%p' ) AS convert_time,
							DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%l%p' ) AS full_time,
							DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%m/%d/%Y %H:00' ) AS download_time,
							CONCAT_WS('-', iv.id_device, DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%H:00' )) AS join_param
							
						FROM
							site si
							LEFT JOIN time_zone t ON t.id = si.id_time_zone
							LEFT JOIN device d ON d.id_site = si.id
							LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id
	
						WHERE
							si.id = #{id_site}
							AND si.id_customer = #{id_customer}
							AND si.`status` = 1 
							AND si.is_delete = 0 
							AND iv.error = 0
							AND CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) BETWEEN #{start_date} AND #{end_date} 
							GROUP BY local_time, iv.id_device
					)t LEFT JOIN (
							SELECT
										iv.time,
										si.id,
										iv.id_device,
										DATE_FORMAT( CONVERT_TZ(  DATE_ADD(iv.time,INTERVAL -1 HOUR), t.`offset`, #{offset_timezone} ) , '%Y-%m-%d %H' ) AS local_time,
										DATE_FORMAT( CONVERT_TZ( DATE_ADD(iv.time,INTERVAL -1 HOUR), t.`offset`, #{offset_timezone} ), '%H:00' ) AS alias_max_time,
										MIN(iv.ytd_kwh_total) AS max_kwh,
										CONCAT_WS('-', iv.id_device, DATE_FORMAT( CONVERT_TZ( DATE_ADD(iv.time,INTERVAL -1 HOUR), t.`offset`, #{offset_timezone} ), '%H:00' )) AS join_param
										
									FROM
										site si
										LEFT JOIN time_zone t ON t.id = si.id_time_zone
										LEFT JOIN device d ON d.id_site = si.id
										LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id
	
									WHERE
										si.id = #{id_site}
										AND si.id_customer = #{id_customer}
										AND si.`status` = 1 
										AND si.is_delete = 0 
										AND iv.error = 0
										AND CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) BETWEEN DATE_ADD(#{start_date},INTERVAL 1 HOUR) AND DATE_ADD(#{end_date},INTERVAL 1 HOUR) 
										GROUP BY local_time, iv.id_device
					)m ON m.join_param = t.join_param 
	
					GROUP BY t.id_device, t.local_time
	
					)k GROUP BY k.local_time
					
				) tmin 
				LEFT JOIN (
					SELECT t.*, ROUND((AVG(t.sensor1_data)) ,2)  AS avg_sensor1_data FROM (
							SELECT
									s.id,
									mr.id_device,
									CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) AS local_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time_day,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d %H' ) AS convert_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%W, %b %d, %Y' ) AS full_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d %H' ) AS mr_local_time,
									mr.sensor1_data 
								FROM
									site s
									LEFT JOIN time_zone t ON t.id = s.id_time_zone
									LEFT JOIN device d ON d.id_site = s.id
									LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
								WHERE
									s.id = #{id_site}
									AND s.id_customer = #{id_customer}
									AND s.`status` = 1 
									AND s.is_delete = 0 
									AND mr.time IS NOT NULL
									AND CONVERT_TZ( mr.time, t.`offset`, '-08:00' ) BETWEEN #{start_date} AND #{end_date}
						)t GROUP BY t.convert_time
				)m ON m.mr_local_time = tmin.local_time

			
		</if>
		
		
		<if test="filterBy == 'this_month' or filterBy == 'last_month'">
			SELECT
			tmin.*,
			ROUND(MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2) AS energy_kwh,
			IF(m.avg_sensor1_data, m.avg_sensor1_data, 0) AS avg_sensor1_data
		FROM
			(
			SELECT
				iv.time,
				si.id,
				si.ac_capacity,
				iv.id_device,
				iv.ytd_kwh_total,
				DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, '+07:00' ), '%d. %b' ) AS convert_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, '+07:00' ), '%W, %b %d, %Y' ) AS full_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d' ) AS local_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS last_updated,
				DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%m/%d/%Y' ) AS download_time
				
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND si.id_customer = #{id_customer}
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND iv.error = 0
				AND YEAR ( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
				AND MONTH ( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
				
			) tmin 
			LEFT JOIN (
				SELECT t.*, ROUND((AVG(t.sensor1_data)) ,2)  AS avg_sensor1_data FROM (
						SELECT
								s.id,
								s.id_time_zone,
								mr.id_device,
								DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
								CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) AS local_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time_day,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%d. %b' ) AS convert_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%W, %b %d, %Y' ) AS full_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d' ) AS mr_local_time,
								mr.sensor1_data 
							FROM
								site s
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
								LEFT JOIN device d ON d.id_site = s.id
								LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
							WHERE
								s.id = #{id_site}
								AND s.id_customer = #{id_customer}
								AND s.`status` = 1 
								AND s.is_delete = 0 
								AND mr.time IS NOT NULL
								AND YEAR ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
								AND MONTH ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
								AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone}) <![CDATA[<=]]> #{end_date}
					)t GROUP BY t.convert_time
			)m ON m.mr_local_time = tmin.local_time
		GROUP BY tmin.local_time
		</if>
		
		<if test="filterBy == '12_month'">
			SELECT
				tmin.*,
				m.full_time,
				m.convert_time,
				MIN( tmin.ytd_kwh_total ) AS min_value,
				MAX( tmin.ytd_kwh_total ) AS max_value,
				ROUND(MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2) AS energy_kwh,
				m.avg_sensor1_data,
				IFNULL(ROUND( ((MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total )) / (m.avg_sensor1_data * tmin.ac_capacity)) * 100 ,2),0) AS day_pr
			FROM
				(
				SELECT
					iv.time,
					si.id,
					si.ac_capacity,
					iv.id_device,
					iv.ytd_kwh_total,
					DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%Y-%m' ) AS local_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS last_updated
					
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id_site}
					AND si.id_customer = #{id_customer}
					AND si.`status` = 1
					 
					AND si.is_delete = 0 
					AND iv.error = 0
					AND CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) BETWEEN #{start_date} AND #{end_date}
					
				) tmin 
				LEFT JOIN (
					SELECT t.*, ROUND((AVG(t.sensor1_data)) ,2)  AS avg_sensor1_data FROM (
							SELECT
									s.id,
									s.id_time_zone,
									mr.id_device,
									DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
									CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) AS local_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time_day,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%b. %Y' ) AS convert_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%b. %Y' ) AS full_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%b. %Y' ) AS download_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m' ) AS mr_local_time,
									mr.sensor1_data 
								FROM
									site s
									LEFT JOIN time_zone t ON t.id = s.id_time_zone
									LEFT JOIN device d ON d.id_site = s.id
									LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
								WHERE
									s.id = #{id_site}
									AND s.id_customer = #{id_customer}
									AND s.`status` = 1 
									AND s.is_delete = 0 
									AND mr.time IS NOT NULL
									AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) BETWEEN #{start_date} AND #{end_date}
						)t GROUP BY t.convert_time
				)m ON m.mr_local_time = tmin.local_time
			GROUP BY tmin.local_time
		</if>
		
		<if test="filterBy == 'lifetime'">
		SELECT
			tmin.*,
			m.full_time,
			m.convert_time,
			ROUND(MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2) AS energy_kwh,
			ROUND(AVG(tmin.ac_power), 2) AS avg_ac_power,
			m.avg_sensor1_data,
			CONCAT_WS(' - ', DATE_FORMAT(MIN(CONVERT_TZ( tmin.time, tmin.`offset`, #{offset_timezone} )),'%M %d, %Y') , DATE_FORMAT(MAX(CONVERT_TZ( tmin.time, tmin.`offset`, #{offset_timezone} )),'%M %d, %Y') ) AS xAxisTitle
		FROM
			(
			SELECT
				iv.time,
				iv.ytd_kwh_total,
				iv.ac_power,
				<choose>
				    <when test="typeView == 'month'">
				      DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%Y-%m' ) AS local_time,
				    </when>
				    
				    <otherwise>
				      DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS local_time,
				    </otherwise>
				</choose>
				DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS last_updated,
				t.`offset`
				
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND si.id_customer = #{id_customer}
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND iv.error = 0
				<choose>
				    <when test="typeView == 'month'">
				      AND CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) BETWEEN #{start_date} AND #{end_date}
				    </when>
				    
				    <otherwise>
				      AND CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> #{end_date}
				    </otherwise>
				</choose>
				
			) tmin 
			LEFT JOIN (
				SELECT t.*, ROUND((AVG(t.sensor1_data)) ,2)  AS avg_sensor1_data FROM (
						SELECT
								s.id,
								s.id_time_zone,
								mr.id_device,
								DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
								CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) AS local_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time_day,
								<choose>
								    <when test="typeView == 'month'">
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%b. %Y' ) AS convert_time,
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%b. %Y' ) AS full_time,
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%b. %Y' ) AS download_time,
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m' ) AS mr_local_time,
								    </when>
								    
								    <otherwise>
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS convert_time,
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS full_time,
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS download_time,
										DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS mr_local_time,
								    </otherwise>
	   							</choose>
								mr.sensor1_data 
							FROM
								site s
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
								LEFT JOIN device d ON d.id_site = s.id
								LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
							WHERE
								s.id = #{id_site}
								AND s.id_customer = #{id_customer}
								AND s.`status` = 1 
								AND s.is_delete = 0 
								AND mr.time IS NOT NULL
								<choose>
								    <when test="typeView == 'month'">
								      AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) BETWEEN #{start_date} AND #{end_date}
								    </when>
								    
								    <otherwise>
								      AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} )  <![CDATA[<=]]> #{end_date}
								    </otherwise>
	   							</choose>
								
					)t GROUP BY t.convert_time
			)m ON m.mr_local_time = tmin.local_time
		GROUP BY tmin.local_time
		</if>
	</select>
	
	<select id="getChartDataIrradiance" resultType="Map" >
		<if test="filterBy == 'today'">
			SELECT
			s.id,
			s.id_time_zone,
			mr.id_device,
			DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS time,
			CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) AS local_time,
			DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time_day,
			mr.sensor1_data 
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN device d ON d.id_site = s.id
			LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
		WHERE
			s.id = #{id_site} 
			AND s.id_customer = #{id_customer}
			AND s.`status` = 1 
			AND s.is_delete = 0 
			AND YEAR ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
			AND MONTH ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
			AND DAY ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = DAY ( #{end_date} )
		</if>
	</select>
	
	
	<select id="getList" resultType="Map">
		SELECT
			s.id,
			s.id_customer,
			s.id_country,
			s.id_time_zone,
			s.`name`,
			s.street,
			s.lat,
			s.lng,
			built_since,
			s.old_data,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.status,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			s.gallery,
			s.id_site_type,
			s.site_default,
			CONCAT_WS(', ',s.street, s.city, s.state, c.`name`, s.postal_code) AS address_full
		FROM
			site AS s
			LEFT JOIN country c ON c.id = s.id_country
		WHERE
			s.id_customer = ${id_customer} AND s.is_delete = 0 ORDER BY s.ID DESC
	</select>

	
</mapper>