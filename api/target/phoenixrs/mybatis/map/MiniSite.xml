<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MiniSite">
	<resultMap id="MiniSiteMap"
		type="com.phoenixrs.api.entities.SiteEntity">
		<result property="id" column="id" />
		<result property="id_customer" column="id_customer" />
		<result property="id_country" column="id_country" />
		<result property="id_time_zone" column="id_time_zone" />
		<result property="name" column="name" />
		<result property="street" column="street" />
		<result property="lat" column="lat" />
		<result property="lng" column="lng" />
		<result property="built_since" column="built_since" />
		<result property="old_data" column="old_data" />
		<result property="number" column="number" />
		<result property="postal_code" column="postal_code" />
		<result property="city" column="city" />
		<result property="state" column="state" />
		<result property="commissioning" column="commissioning" />
		<result property="emergency_contact" column="emergency_contact" />
		<result property="ac_capacity" column="ac_capacity" />
		<result property="dc_capacity" column="dc_capacity" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
		<result property="address_short" column="address_short" />
		
		<result property="watts_3ph_total" column="watts_3ph_total" />
		<result property="sensor1_data" column="sensor1_data" />
		<result property="w_hours_total" column="w_hours_total" />
		<result property="today_kwh" column="today_kwh" />
		<result property="total_energy_this_month" column="total_energy_this_month" />
		<result property="eer_this_month" column="eer_this_month" />
		<result property="eer_last_month" column="eer_last_month" />
		<result property="w_hours_received" column="w_hours_received" />
		<result property="total_error" column="total_error" />
		<result property="alert_list" column="alert_list" />
		<result property="gallery" column="gallery" />
		<result property="id_site_type" column="id_site_type" />
		<result property="street_ws" column="street_ws" />
		<result property="localization_format" column="localization_format" />
		<result property="format_sql_short" column="format_sql_short" />
		<result property="format_sql_long" column="format_sql_long" />
		<result property="format_sql_string_short" column="format_sql_string_short" />
		<result property="format_sql_string_long" column="format_sql_string_long" />
		<result property="format_sql_string_mdy" column="format_sql_string_mdy" />
		<result property="offset_from" column="offset_from" />
		<result property="current_time" column="current_time" />
	</resultMap>
	
	
	
	<select id="getMiniSiteInfo" resultType="Map" >
		SELECT
			s.id,
			s.`name`,
			s.ac_capacity,
			s.dc_capacity,
			DATE_FORMAT( s.built_since, '%m/%d/%Y %H:%i:%s' ) AS built_since,
			DATE_FORMAT( s.commissioning, '%m/%d/%Y %H:%i:%s' ) AS commissioning,
			t.w_hours_received AS energy_lifetime,
			ROUND( t.w_hours_received - m.w_hours_received, 2 ) AS energy_this_year,
			ROUND( t.w_hours_received - b.w_hours_received, 2 ) AS energy_this_month,
			ROUND( t.w_hours_received - g.w_hours_received, 2 ) AS energy_today,
			k.ac_power,
			c.format_sql_long,
			c.localization_format
		FROM
			site s
			LEFT JOIN country c ON c.id = s.id_country
			LEFT JOIN device d ON d.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.time,
				sh.w_hours_received,
				di.id_site,
				sh.id_device 
			FROM
				model_shark100 sh,
				(
				SELECT
					sh.id_device,
					sh.w_hours_received,
					MAX( time ) AS sh_time 
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_shark100 AS sh ON sh.id_device = d.id 
				WHERE
					YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
					AND MONTH ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
					AND DAY ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = DAY ( #{end_date} ) 
				GROUP BY
					sh.id_device 
				) AS max_lifetime
				LEFT JOIN device AS di ON di.id = max_lifetime.id_device
				LEFT JOIN site AS s ON s.id = di.id_site
				LEFT JOIN time_zone AS t ON t.id = s.id_time_zone 
			WHERE
				sh.id_device = max_lifetime.id_device 
				AND CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) = max_lifetime.sh_time 
			) t ON t.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.time,
				sh.w_hours_received,
				di.id_site,
				sh.id_device 
			FROM
				model_shark100 sh,
				(
				SELECT
					sh.id_device,
					sh.w_hours_received,
					DATE_FORMAT( MIN( time ), '%Y-%m-%d %H:%i:%s' ) AS sh_time 
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_shark100 AS sh ON sh.id_device = d.id 
				WHERE
					YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
				GROUP BY
					sh.id_device 
				) AS min_this_year
				LEFT JOIN device AS di ON di.id = min_this_year.id_device
				LEFT JOIN site AS s ON s.id = di.id_site
				LEFT JOIN time_zone AS t ON t.id = s.id_time_zone 
			WHERE
				sh.id_device = min_this_year.id_device 
				AND YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( min_this_year.sh_time ) 
			GROUP BY
				sh.id_device 
			) m ON m.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.time,
				sh.w_hours_received,
				di.id_site,
				sh.id_device 
			FROM
				model_shark100 sh,
				(
				SELECT
					sh.id_device,
					sh.w_hours_received,
					MIN( time ) AS sh_time 
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_shark100 AS sh ON sh.id_device = d.id 
				WHERE
					YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
					AND MONTH ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
				GROUP BY
					sh.id_device 
				) AS min_this_year
				LEFT JOIN device AS di ON di.id = min_this_year.id_device
				LEFT JOIN site AS s ON s.id = di.id_site
				LEFT JOIN time_zone AS t ON t.id = s.id_time_zone 
			WHERE
				sh.id_device = min_this_year.id_device 
				AND CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) = min_this_year.sh_time 
			GROUP BY
				sh.id_device 
			) b ON b.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.time,
				sh.w_hours_received,
				di.id_site,
				sh.id_device 
			FROM
				model_shark100 sh,
				(
				SELECT
					sh.id_device,
					sh.w_hours_received,
					MIN( time ) AS sh_time 
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_shark100 AS sh ON sh.id_device = d.id 
				WHERE
					YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
					AND MONTH ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
					AND DAY ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = DAY ( #{end_date} ) 
				GROUP BY
					sh.id_device 
				) AS min_today
				LEFT JOIN device AS di ON di.id = min_today.id_device
				LEFT JOIN site AS s ON s.id = di.id_site
				LEFT JOIN time_zone AS t ON t.id = s.id_time_zone 
			WHERE
				sh.id_device = min_today.id_device 
				AND CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) = min_today.sh_time 
			GROUP BY
				sh.id_device 
			) g ON g.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.time,
				sh.ac_power,
				di.id_site,
				sh.id_device 
			FROM
				model_ivt_solaron_ext sh,
				(
				SELECT
					sh.id_device,
					sh.ac_power,
					MAX( time ) AS sh_time 
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_ivt_solaron_ext AS sh ON sh.id_device = d.id 
				WHERE
					YEAR ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
					AND MONTH ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
					AND DAY ( CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) ) = DAY ( #{end_date} ) 
				GROUP BY
					sh.id_device 
				) AS min_today
				LEFT JOIN device AS di ON di.id = min_today.id_device
				LEFT JOIN site AS s ON s.id = di.id_site
				LEFT JOIN time_zone AS t ON t.id = s.id_time_zone 
			WHERE
				sh.id_device = min_today.id_device 
				AND CONVERT_TZ( sh.time, t.`offset`, #{offset_timezone} ) = min_today.sh_time 
			GROUP BY
				sh.id_device 
			) k ON k.id_site = s.id 
		WHERE
			s.id = #{id}
			AND s.`status` = 1 
			AND s.is_delete = 0 
		GROUP BY
			s.id_customer;
	</select>
	
	
	<select id="getChartInverterPerformanceEnergy" resultType="Map" >
		SELECT
			t.*
			FROM
				(
					SELECT
						s.id,
						DATE_FORMAT( CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time,
						DATE_FORMAT(CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d %H:%i') AS local_time,
						FLOOR(UNIX_TIMESTAMP(CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ))/(15 * 60)) AS intervals_time,
						DATE_FORMAT( CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ), '%W, %b %d, %Y %H:%i' ) AS string_time,
						d.devicename,
						mv.id_device,
					mv.ytd_kwh_total,
					mv.today_kwh,
					mv.ac_power
					FROM
						site s
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
						LEFT JOIN device d ON d.id_site = s.id
						LEFT JOIN model_ivt_solaron_ext mv ON mv.id_device = d.id 
					WHERE
						s.id = #{id}
						AND s.`status` = 1 
						AND s.is_delete = 0 
						AND CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ) BETWEEN #{start_date} AND #{end_date}
					) t GROUP BY t.intervals_time
	</select>
	
	
	<select id="getChartInverterPerformanceIrradiance" resultType="Map" >
		<if test="filterBy == 'day' or filterBy == 'threeDay' ">
			SELECT
				t.*,
				<if test="filterBy == 'threeDay'">
					CONCAT_WS( ' - ', DATE_FORMAT( #{start_date}, '%M %d, %Y' ), DATE_FORMAT( #{end_date}, '%M %d, %Y' ) ) AS xAxisTitle
				</if>
				<if test="filterBy == 'day' ">
					DATE_FORMAT( #{end_date}, '%M %d, %Y' )  AS xAxisTitle
				</if>
				 
				FROM
					(
						SELECT
							s.id,
							DATE_FORMAT( CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time,
							DATE_FORMAT(CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d %H:%i') AS local_time,
							FLOOR(UNIX_TIMESTAMP(CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ))/(15 * 60)) AS intervals_time,
							DATE_FORMAT( CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ), '%W, %b %d, %Y %H:%i' ) AS string_time,
							mv.id_device,
							mv.sensor1_data,
							d.devicename
						FROM
							site s
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device d ON d.id_site = s.id
							LEFT JOIN model_rt1_class30000 mv ON mv.id_device = d.id 
						WHERE
							s.id = #{id}
							AND s.`status` = 1 
							AND s.is_delete = 0 
							AND CONVERT_TZ( mv.time, t.`offset`, #{offset_timezone} ) BETWEEN #{start_date} AND #{end_date}
						) t GROUP BY t.intervals_time
		</if>
		
		<if test="filterBy == 'month'">
			SELECT
				tmin.*,
				m.full_time,
				m.convert_time,
				ROUND( MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2 ) AS energy_month_kw,
				ROUND( AVG( tmin.ac_power ), 2 ) AS avg_ac_power,
				m.avg_month_sensor1_data,
				CONCAT_WS( ' - ', DATE_FORMAT( k.t_min, '%M %d, %Y' ), DATE_FORMAT( k.t_max, '%M %d, %Y' ) ) AS xAxisTitle 
			FROM
				(
				SELECT
					si.id,
					iv.time,
					iv.ytd_kwh_total,
					iv.ac_power,
					DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d' ) AS local_time,
					d.devicename,
					t.`offset` 
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id}
					AND si.`status` = 1 
					AND si.is_delete = 0 
					AND iv.error = 0 
					AND YEAR ( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
					AND MONTH ( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
					AND CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> #{end_date} 
				) tmin
				LEFT JOIN (
				SELECT
					t.*,
					ROUND( ( AVG( t.sensor1_data ) ), 2 ) AS avg_month_sensor1_data 
				FROM
					(
					SELECT
						s.id,
						s.id_time_zone,
						mr.id_device,
						DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
						CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) AS local_time,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time_day,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%d. %b' ) AS convert_time,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%W, %b %d, %Y' ) AS full_time,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d' ) AS mr_local_time,
						mr.sensor1_data 
					FROM
						site s
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
						LEFT JOIN device d ON d.id_site = s.id
						LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
					WHERE
						s.id = #{id}
						AND s.`status` = 1 
						AND s.is_delete = 0 
						AND mr.time IS NOT NULL 
						AND YEAR ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
						AND MONTH ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
						AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> #{end_date} 
					) t 
				GROUP BY
					t.convert_time 
				) m ON m.mr_local_time = tmin.local_time
				LEFT JOIN (
				SELECT
					t.* 
				FROM
					(
					SELECT
						s.id,
						s.id_time_zone,
						mr.id_device,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%d. %b' ) AS convert_time,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d' ) AS mr_local_time,
						MIN( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) AS t_min,
						MAX( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) AS t_max 
					FROM
						site s
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
						LEFT JOIN device d ON d.id_site = s.id
						LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
					WHERE
						s.id = #{id}
						AND s.`status` = 1 
						AND s.is_delete = 0 
						AND mr.time IS NOT NULL 
						AND YEAR ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date} ) 
						AND MONTH ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = MONTH ( #{end_date} ) 
						AND CONVERT_TZ( mr.time, t.`offset`, '+07:00' ) <![CDATA[<=]]> #{end_date} 
					) t 
				GROUP BY
					t.convert_time 
				) k ON k.id = tmin.id 
			GROUP BY
				tmin.local_time
		</if>
		
		<if test="filterBy == 'year'">
			SELECT
				tmin.*,
				m.full_time,
				m.convert_time,
				ROUND(MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2) AS energy_month_kw,
				ROUND(AVG(tmin.ac_power), 2) AS avg_ac_power,
				m.avg_month_sensor1_data,
				CONCAT_WS(' - ', DATE_FORMAT( h.t_min,'%M %d, %Y') , DATE_FORMAT(h.t_max,'%M %d, %Y') ) AS xAxisTitle
			FROM
				(
				SELECT
					si.id,
					iv.time,
					iv.ytd_kwh_total,
					iv.ac_power,
					DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`,#{offset_timezone} ), '%Y-%m' ) AS local_time,
					d.devicename,
					t.`offset`
					
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id}
					AND si.`status` = 1 
					AND si.is_delete = 0 
					AND iv.error = 0
					AND CONVERT_TZ( iv.time, t.`offset`,#{offset_timezone} ) <![CDATA[<=]]> #{end_date} 
					
				) tmin 
				LEFT JOIN (
					SELECT t.*, ROUND((AVG(t.sensor1_data)) ,2)  AS avg_month_sensor1_data FROM (
							SELECT
									s.id,
									s.id_time_zone,
									mr.id_device,
									DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
									CONVERT_TZ( mr.time, t.`offset`,#{offset_timezone} ) AS local_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`,#{offset_timezone} ), '%H:%i' ) AS time_day,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`,#{offset_timezone} ), "%b' %y" ) AS convert_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`,#{offset_timezone} ), '%M %Y' ) AS full_time,
									DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`,#{offset_timezone} ), '%Y-%m' ) AS mr_local_time,
									mr.sensor1_data 
								FROM
									site s
									LEFT JOIN time_zone t ON t.id = s.id_time_zone
									LEFT JOIN device d ON d.id_site = s.id
									LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
								WHERE
									s.id = #{id}
									AND s.`status` = 1 
									AND s.is_delete = 0 
									AND mr.time IS NOT NULL
									AND CONVERT_TZ( mr.time, t.`offset`,#{offset_timezone} ) <![CDATA[<=]]> #{end_date} 
						)t GROUP BY t.convert_time
				)m ON m.mr_local_time = tmin.local_time
				
				LEFT JOIN (
				SELECT
					h.* 
				FROM
					(
					SELECT
						s.id,
						s.id_time_zone,
						mr.id_device,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%d. %b' ) AS convert_time,
						DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y-%m-%d' ) AS mr_local_time,
						MIN( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) AS t_min,
						MAX( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) AS t_max 
					FROM
						site s
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
						LEFT JOIN device d ON d.id_site = s.id
						LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
					WHERE
						s.id = #{id}
						AND s.`status` = 1 
						AND s.is_delete = 0 
						AND mr.time IS NOT NULL 
						AND YEAR ( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) ) = YEAR ( #{end_date}  ) 
						AND CONVERT_TZ( mr.time, t.`offset`, '+07:00' ) <![CDATA[<=]]> #{end_date}  
					) h 
				GROUP BY
					h.convert_time 
				) h ON h.id = tmin.id 
				
			GROUP BY tmin.local_time
		</if>
		
		<if test="filterBy == 'lifetime'">
		SELECT
			tmin.*,
			m.full_time,
			m.convert_time,
			ROUND(MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2) AS energy_month_kw,
			ROUND(AVG(tmin.ac_power), 2) AS avg_ac_power,
			m.avg_month_sensor1_data,
			CONCAT_WS(' - ', DATE_FORMAT(MIN(CONVERT_TZ( tmin.time, tmin.`offset`, #{offset_timezone} )),'%M %d, %Y') , DATE_FORMAT(MAX(CONVERT_TZ( tmin.time, tmin.`offset`, #{offset_timezone} )),'%M %d, %Y') ) AS xAxisTitle
		FROM
			(
			SELECT
				iv.time,
				iv.ytd_kwh_total,
				iv.ac_power,
				DATE_FORMAT( CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS local_time,
				t.`offset`
				
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id}
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND iv.error = 0
				AND CONVERT_TZ( iv.time, t.`offset`, #{offset_timezone} ) <![CDATA[<=]]> #{end_date}  
				
			) tmin 
			LEFT JOIN (
				SELECT t.*, ROUND((AVG(t.sensor1_data)) ,2)  AS avg_month_sensor1_data FROM (
						SELECT
								s.id,
								s.id_time_zone,
								mr.id_device,
								DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
								CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ) AS local_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%H:%i' ) AS time_day,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS convert_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS full_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} ), '%Y' ) AS mr_local_time,
								mr.sensor1_data 
							FROM
								site s
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
								LEFT JOIN device d ON d.id_site = s.id
								LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
							WHERE
								s.id = #{id}
								AND s.`status` = 1 
								AND s.is_delete = 0 
								AND mr.time IS NOT NULL
								AND CONVERT_TZ( mr.time, t.`offset`, #{offset_timezone} )  <![CDATA[<=]]> #{end_date}
					)t GROUP BY t.convert_time
			)m ON m.mr_local_time = tmin.local_time
		GROUP BY tmin.local_time
		</if>
		
	</select>
	
	
	
</mapper>