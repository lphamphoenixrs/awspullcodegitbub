<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Device">
	<resultMap id="DeviceMap"
		type="com.phoenixrs.api.entities.DeviceEntity">
		<result property="id" column="id" />
		<result property="id_site" column="id_site" />
		<result property="id_vendor" column="id_vendor" />
		<result property="serial_number" column="serial_number" />
		<result property="modbusdevicenumber" column="modbusdevicenumber" />
		<result property="devicename" column="devicename" />
		<result property="devicetype" column="devicetype" />
		<result property="deviceclass" column="deviceclass" />
		<result property="configuration" column="configuration" />
		<result property="configurationchangetime" column="configurationchangetime" />
		<result property="configurationchecksum" column="configurationchecksum" />
		<result property="datatablename" column="datatablename" />
		<result property="id_customer" column="id_customer" />
		<result property="id_device_type" column="id_device_type" />
		<result property="active" column="active" />
		<result property="id_device_group" column="id_device_group" />
		<result property="keyword" column="keyword" />
		
		
	</resultMap>

	<select id="getListBySerialNumber" resultMap="DeviceMap" parameterType="String">
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.devicetype,
			d.deviceclass,
			d.configuration,
			d.configurationchecksum,
			d.configurationchangetime,
			d.datatablename
		FROM
			device AS d
		WHERE
			d.serial_number = #{serial_number};
	</select>
	
	<select id="getListByDeviceType" resultMap="DeviceMap">
		SELECT
			d.id,
			d.id_site,
			d.id_device_type,
			d.id_vendor,
			d.serial_number,
			d.devicename,
			d.devicetype,
			0 AS active 
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id 
		WHERE
			d.id_device_type = #{id_device_type} 
			AND s.id = #{id_site} 
			AND s.id_customer = #{id_customer} 
			AND s.`status` = 1 
			AND s.is_delete = 0
	</select>
	
	
	<select id="getListDeviceByGroup" resultMap="DeviceMap">
		SELECT
			d.id,
			d.id_site,
			d.id_device_type,
			d.id_device_group,
			d.id_vendor,
			d.serial_number,
			d.devicename,
			d.devicetype,
			0 AS active
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id 
		WHERE
			d.id_device_group = #{id_device_group} 
			AND s.id = #{id_site} 
			AND s.id_customer = #{id_customer} 
			AND s.`status` = 1
			AND s.is_delete = 0
	</select>
	
	<select id="getListDeviceBySite" resultType="Map" >
		SELECT
			s.id,
			s.id_site,
			s.`id_vendor`,
			s.id_device_type,
			s.id_device_group,
			s.serial_number,
			s.modbusdevicenumber,
			s.devicename,
			s.devicetype,
			s.deviceclass,
			s.`configuration`,
			DATE_FORMAT(s.configurationchangetime,'%m/%d/%Y') AS configurationchangetime,
			s.configurationchecksum,
			s.datatablename,
			s.`status`,
			s.is_delete
		FROM
			device s
		WHERE s.id_site = #{id_site}
		<if test="keyword != null">
			 AND s.devicename LIKE CONCAT("%",#{keyword}, "%")
		</if> 	
		    order by
	        <choose>  
	            <when test="sort_column == 'id'">
	                s.id ${order_by}
	            </when>         
	            <when test="sort_column == 'id_vendor'">
	                s.id_vendor ${order_by}
	            </when>
	            <when test="sort_column == 'id_device_type'">
	                s.id_device_type ${order_by}
	            </when>
	            <when test="sort_column == 'id_device_group'">
	                s.id_device_group ${order_by}
	            </when>
	            <when test="sort_column == 'serial_number'">
	                s.serial_number ${order_by}
	            </when>
	            <when test="sort_column == 'datatablename'">
	                s.datatablename ${order_by}
	            </when>
	            <when test="sort_column == 'status'">
	                status ${order_by}
	            </when>
	            
	            <otherwise>
			      s.id DESC
			    </otherwise>                                                  
	        </choose>  
		 	 
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
  	
	
	<select id="getDeviceBySiteTotalRecord"  resultType="int" parameterType="com.phoenixrs.api.entities.DeviceEntity">
    	SELECT count(*) as totalRow
		FROM device s
		WHERE s.id_site = #{id_site}
		<if test="keyword != null">
			AND s.devicename LIKE CONCAT("%",#{keyword}, "%")
		</if> 
  	</select>
  	
  	
  	<update id="updateStatus">
		UPDATE `device`
		SET
			`status` = #{status}
		WHERE
			`id` = #{id} AND id_site = #{id_site}
	</update>
	
	
	<update id="deleteDevice">
		UPDATE `device`
		SET
			`is_delete` = #{is_delete}
		WHERE
			`id` = #{id}
	</update>
	
	<insert id="insertDevice" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `device`(
			`id_site`,
			`id_vendor`,
			`id_device_type`,
			`id_device_group`,
			`serial_number`,
			`modbusdevicenumber`,
			`devicename`,
			`devicetype`,
			`deviceclass`,
			`configuration`,
			`configurationchangetime`,
			`configurationchecksum`,
			`datatablename`
		)VALUES(
			#{id_site},
			#{id_vendor},
			#{id_device_type},
			#{id_device_group},
			#{serial_number},
			#{modbusdevicenumber},
			#{devicename},
			#{devicetype},
			#{deviceclass},
			#{configuration},
			#{configurationchangetime},
			#{configurationchecksum},
			#{datatablename}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="updateDevice">
		UPDATE `device`
		SET
			id_site = #{id_site},
			id_vendor = #{id_vendor},
			id_device_type = #{id_device_type},
			id_device_group = #{id_device_group},
			serial_number = #{serial_number},
			modbusdevicenumber = #{modbusdevicenumber},
			devicename = #{devicename},
			devicetype = #{devicetype},
			deviceclass = #{deviceclass},
			configuration = #{configuration},
			configurationchangetime = #{configurationchangetime},
			configurationchecksum = #{configurationchecksum},
			datatablename = #{datatablename}
		WHERE
			`id` = #{id}
	</update>
	
</mapper>