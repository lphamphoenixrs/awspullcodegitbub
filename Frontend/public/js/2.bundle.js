(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "XAA3":
/*!*************************************!*\
  !*** ./src/services/RoleService.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RoleService = function () {\n    _createClass(RoleService, null, [{\n        key: 'instance',\n        get: function get() {\n            if (!this._instance) {\n                this._instance = new RoleService();\n            }\n            return this._instance;\n        }\n    }]);\n\n    function RoleService() {\n        _classCallCheck(this, RoleService);\n    }\n\n    /**\n     * Get role list\n     * @author Long.pham 2020-12-30\n     * @param {RoleEntiry} objE \n     * @param {function (data,total_row,msg)} callBack \n     * @param {boolean} isShowProgress \n     */\n\n\n    _createClass(RoleService, [{\n        key: 'getList',\n        value: function getList(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.LIST, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                callBack(false, 0, error);\n            }\n        }\n\n        /**\n         * API call for save data\n         * @author Long.pham 2020-12-30\n         * @param {RoleEntiry} objE\n         * @param {Function} callBack\n         * @param {boolean} isShowProgress\n         */\n\n    }, {\n        key: 'save',\n        value: function save(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.SAVE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = null;\n                        var msg = Libs.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        if (!Libs.isObjectEmpty(rs.data)) {\n                            data = rs.data;\n                        }\n                        callBack(rs.status, data, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, null, error);\n            }\n        }\n\n        /**\n         * API call for save data\n         * @author Long.pham 2020-12-30\n         * @param {RoleEntiry} objE\n         * @param {Function} callBack\n         * @param {boolean} isShowProgress\n         */\n\n    }, {\n        key: 'delete',\n        value: function _delete(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.DELETE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            //error http => lib http  proccess\n                            return;\n                        }\n                        var data = null;\n                        var msg = Libs.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        if (!Libs.isObjectEmpty(rs.data)) {\n                            data = rs.data;\n                        }\n\n                        callBack(rs.status, data, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, 0, error);\n            }\n        }\n\n        /**\n          * API call for update Roles status\n          * @author long.pham\n          * @param @param {RoleEntity} objE\n          * @param {function(status,msg)} callBack \n          * @param  {boolean} isShowProgress\n          */\n\n    }, {\n        key: 'updateStatus',\n        value: function updateStatus(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.UPDATE_STATUS, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var msg = Libs.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        callBack(rs.status, msg);\n                    }\n                });\n            } catch (error) {\n                console.log('RolesService.updateStatus:', error);\n                callBack(false, error);\n            }\n        }\n\n        /**\n        * Get list screen permission\n        * @author long.pham 2020-12-31\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getListScreenPermissions',\n        value: function getListScreenPermissions(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.LIST_SCREEN, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                callBack(false, 0, error);\n            }\n        }\n\n        /**\n         * API call update permission for role\n         * @author long.pham 2020-12-31\n         * @param {RoleEntity} objE\n         * @param {Function} callBack\n         * @param {boolean} isShowProgress\n         */\n\n    }, {\n        key: 'updateRolePermissions',\n        value: function updateRolePermissions(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.UPDATE_PERMISSIONS, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var msg = Libs.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        callBack(rs.status, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, error);\n            }\n        }\n\n        /**\n         * Get all role\n         * @author Long.pham 2021-01-06\n         * @param {RoleEntiry} objE \n         * @param {function (data,total_row,msg)} callBack \n         * @param {boolean} isShowProgress \n         */\n\n    }, {\n        key: 'getAllRole',\n        value: function getAllRole(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.ALL, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                callBack(false, 0, error);\n            }\n        }\n\n        /**\n          * API call for update permission for all role\n          * @author long.pham\n          * @param @param {} objE\n          * @param {function(status,msg)} callBack \n          * @param  {boolean} isShowProgress\n          * \n          */\n\n    }, {\n        key: 'updateAllPermission',\n        value: function updateAllPermission(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.ROLE.UPDATE_ALL_PERMISSION, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var msg = Libs.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        callBack(rs.status, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, error);\n            }\n        }\n    }]);\n\n    return RoleService;\n}();\n\nexports.default = RoleService;\n\n//# sourceURL=webpack:///./src/services/RoleService.js?");

/***/ })

}]);