(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[3],{

/***/ "DudT":
/*!*************************************!*\
  !*** ./src/services/SiteService.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Libs = __webpack_require__(/*! ../utils/Libs */ \"aKSJ\");\n\nvar _Libs2 = _interopRequireDefault(_Libs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SiteService = function () {\n    _createClass(SiteService, null, [{\n        key: 'instance',\n        get: function get() {\n            if (!this._instance) {\n                this._instance = new SiteService();\n            }\n            return this._instance;\n        }\n    }]);\n\n    function SiteService() {\n        _classCallCheck(this, SiteService);\n    }\n\n    /**\n     * Get all site page employee manage site\n     * @author Long.pham 2021-01-07\n     * @param {RoleEntiry} objE \n     * @param {function (data,total_row,msg)} callBack \n     * @param {boolean} isShowProgress \n     */\n\n\n    _createClass(SiteService, [{\n        key: 'getListAllSite',\n        value: function getListAllSite(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.LIST_ALL_SITE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                callBack(false, 0, error);\n            }\n        }\n\n        /**\n          * API call for \n          * @author long.pham 2021-01-06\n          * @param @param {EmployeeEntity} objE\n          * @param {function(status,msg)} callBack \n          * @param  {boolean} isShowProgress\n          */\n\n    }, {\n        key: 'addEmployeeManageSite',\n        value: function addEmployeeManageSite(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.ADD_MANAGE_SITE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var msg = _Libs2.default.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        callBack(rs.status, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, error);\n            }\n        }\n\n        /**\n         * API call for save data\n         * @author Long.pham 2021-01-08\n         * @param {CustomerEntiry} objE\n         * @param {Function} callBack\n         * @param {boolean} isShowProgress\n         */\n\n    }, {\n        key: 'save',\n        value: function save(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.SAVE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = null;\n                        var msg = _Libs2.default.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        if (!_Libs2.default.isObjectEmpty(rs.data)) {\n                            data = rs.data;\n                        }\n                        callBack(rs.status, data, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, null, error);\n            }\n        }\n\n        /**\n        * @author long.pham 2021-01-08\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getList',\n        value: function getList(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.LIST, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n          * API call for update Employee status\n          * @author long.pham 2021-01-06\n          * @param @param {EmployeeEntity} objE\n          * @param {function(status,msg)} callBack \n          * @param  {boolean} isShowProgress\n          */\n\n    }, {\n        key: 'updateStatus',\n        value: function updateStatus(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.UPDATE_STATUS, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var msg = _Libs2.default.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        callBack(rs.status, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, error);\n            }\n        }\n\n        /**\n         * API call for save data\n         * @author Long.pham 2021-01-06\n         * @param {EmployeeEntiry} objE\n         * @param {Function} callBack\n         * @param {boolean} isShowProgress\n         */\n\n    }, {\n        key: 'delete',\n        value: function _delete(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.DELETE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            //error http => lib http  proccess\n                            return;\n                        }\n                        var data = null;\n                        var msg = _Libs2.default.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n                        if (!_Libs2.default.isObjectEmpty(rs.data)) {\n                            data = rs.data;\n                        }\n\n                        callBack(rs.status, data, msg);\n                    }\n                });\n            } catch (error) {\n                callBack(false, 0, error);\n            }\n        }\n\n        /**\n        * Get all site by id_customer\n        * @author long.pham 2020-10-08\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getAllSiteByEmployee',\n        value: function getAllSiteByEmployee(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.ALL_BY_EMPLOYEE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n        * Get all site by id_customer\n        * @author long.pham 2020-10-08\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getAll',\n        value: function getAll(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.ALL, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n         * API get summary site by customer id\n         * @author long.pham 2020-10-21\n         * @param {function(data)} callBack\n         * @param {int} id_customer \n         */\n\n    }, {\n        key: 'getSummarySiteByCustomerId',\n        value: function getSummarySiteByCustomerId(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.SITE_SUMMARY, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            //error http => lib http  proccess\n                            return;\n                        }\n                        var data = {};\n                        if (rs.status && _typeof(rs.data) === 'object') {\n                            data = rs.data;\n                        }\n                        callBack(data);\n                    }\n                });\n            } catch (error) {\n                callBack({});\n            }\n        }\n\n        /**\n         * API get detail site by customer id and site id\n         * @author long.pham 2020-10-22\n         * @param {function(data)} callBack\n         * @param {int} id_customer, id_site \n         * @return Object\n         */\n\n    }, {\n        key: 'getDashboardDetailSite',\n        value: function getDashboardDetailSite(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.SITE_DASHBOARD_DETAIL, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            //error http => lib http  proccess\n                            return;\n                        }\n                        var data = {};\n                        if (rs.status && _typeof(rs.data) === 'object') {\n                            data = rs.data;\n                        }\n                        callBack(data);\n                    }\n                });\n            } catch (error) {\n                callBack({});\n            }\n        }\n\n        /**\n         * API get chart KPI by day\n         * @author long.pham 2020-10-22\n         * @param {function(data)} callBack\n         * @param {int} id_customer, id_site \n         * @return Object\n         */\n\n    }, {\n        key: 'getChartKPIDay',\n        value: function getChartKPIDay(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.CHART_KPI_DAY, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            //error http => lib http  proccess\n                            return;\n                        }\n                        var data = {};\n                        if (rs.status && _typeof(rs.data) === 'object') {\n                            data = rs.data;\n                        }\n                        callBack(data);\n                    }\n                });\n            } catch (error) {\n                callBack({});\n            }\n        }\n\n        /**\n         * API call for save data\n         * @author long.pham 2020-10-30\n         * @param {SiteEntity} objE\n         * @param {Function} callBack\n         * @param {boolean} isShowProgress\n         */\n        // save(objE, callBack, isShowProgress = true) {\n        //     try {\n        //         var http = new flHttp(isShowProgress);\n        //         http.post(Constants.URL.SITE.UPDATE, objE, function (status, rs) {\n        //             if (typeof callBack === 'function') {\n        //                 if (!status || !rs) {\n        //                     return;\n        //                 }\n        //                 var data = null;\n        //                 var msg = Libs.isBlank(rs.mess) ? trans.translate('message.msg_err_unknown') : rs.mess;\n        //                 if (!Libs.isObjectEmpty(rs.data)) {\n        //                     data = rs.data;\n        //                 }\n        //                 callBack(rs.status, data, msg);\n        //             }\n        //         })\n        //     } catch (error) {\n        //         callBack(false, null, error);\n        //     }\n        // }\n\n        /**\n        * @author long.pham 2020-11-09\n        * @param {function (data,total_row,msg)} callBack \n        * @param id_site, id_customer, id_device, device_type\n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getListReportQuickQuery',\n        value: function getListReportQuickQuery(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.QUICK_QUERY, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n        * Get list specific yield year\n        * @author long.pham 2020-11-06\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getSpecificYieldMonth',\n        value: function getSpecificYieldMonth(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.SPECIFIC_YIELD_MONTH, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n        * Get list specific yield year\n        * @author long.pham 2020-11-06\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getSpecificYieldYear',\n        value: function getSpecificYieldYear(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.SPECIFIC_YIELD_YEAR, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n         * API get daily report\n         * @author long.pham 2020-11-11\n         * @param {function(data)} callBack\n         * @param {int} id_customer, id_site \n         * @return Object\n         */\n\n    }, {\n        key: 'getDailyReportSum',\n        value: function getDailyReportSum(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.DAILY_REPORT, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            //error http => lib http  proccess\n                            return;\n                        }\n                        var data = {};\n                        if (rs.status && _typeof(rs.data) === 'object') {\n                            data = rs.data;\n                        }\n                        callBack(data);\n                    }\n                });\n            } catch (error) {\n                callBack({});\n            }\n        }\n\n        /**\n        * Get list daily report chart\n        * @author long.pham 2020-11-11\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getDailyReportChart',\n        value: function getDailyReportChart(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.DAILY_REPORT_CHART, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n        * Get list visualization device by month\n        * @author long.pham 2020-11-11\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getReportVisualizationDevice',\n        value: function getReportVisualizationDevice(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.REPORT_VISUALIZATION_DEVICE, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n        * Get list visualization device by day\n        * @author long.pham 2020-11-11\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getReportVisualizationDeviceDay',\n        value: function getReportVisualizationDeviceDay(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.REPORT_VISUALIZATION_DEVICE_DAY, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n\n        /**\n        * Get list annual comparison\n        * @author long.pham 2020-11-13\n        * @param {function (data,total_row,msg)} callBack \n        * @param {boolean} isShowProgress \n        */\n\n    }, {\n        key: 'getAnnualComparison',\n        value: function getAnnualComparison(objE, callBack) {\n            var isShowProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            try {\n                var http = new flHttp(isShowProgress);\n                http.post(Constants.URL.SITE.ANNUAL_COMPARISON, objE, function (status, rs) {\n                    if (typeof callBack === 'function') {\n                        if (!status || !rs) {\n                            return;\n                        }\n                        var data = [];\n                        var total_row = 0;\n                        if (rs.status && Array.isArray(rs.data)) {\n                            data = rs.data;\n                            total_row = rs.total_row;\n                        }\n                        callBack(data, total_row, \"\");\n                    }\n                });\n            } catch (error) {\n                var msg = error;\n                callBack(false, 0, msg);\n            }\n        }\n    }]);\n\n    return SiteService;\n}();\n\nexports.default = SiteService;\n\n//# sourceURL=webpack:///./src/services/SiteService.js?");

/***/ })

}]);